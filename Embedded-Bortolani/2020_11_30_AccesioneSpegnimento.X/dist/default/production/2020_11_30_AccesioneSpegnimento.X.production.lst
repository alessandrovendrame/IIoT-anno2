

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Nov 30 16:01:04 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F628A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0015                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001F                     	;# 
    76  0081                     	;# 
    77  0085                     	;# 
    78  0086                     	;# 
    79  008C                     	;# 
    80  008E                     	;# 
    81  0092                     	;# 
    82  0098                     	;# 
    83  0099                     	;# 
    84  009A                     	;# 
    85  009B                     	;# 
    86  009C                     	;# 
    87  009D                     	;# 
    88  009F                     	;# 
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000E                     	;# 
   100  000E                     	;# 
   101  000F                     	;# 
   102  0010                     	;# 
   103  0011                     	;# 
   104  0012                     	;# 
   105  0015                     	;# 
   106  0015                     	;# 
   107  0016                     	;# 
   108  0017                     	;# 
   109  0018                     	;# 
   110  0019                     	;# 
   111  001A                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  008C                     	;# 
   117  008E                     	;# 
   118  0092                     	;# 
   119  0098                     	;# 
   120  0099                     	;# 
   121  009A                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009F                     	;# 
   126                           
   127                           	psect	idataBANK0
   128  0108                     __pidataBANK0:
   129                           
   130                           ;initializer for _statoFirstLed
   131  0108  3401               	retlw	1
   132  0109  3400               	retlw	0
   133  0005                     _PORTA	set	5
   134  000B                     _INTCON	set	11
   135  0006                     _PORTB	set	6
   136  0001                     _TMR0	set	1
   137  0081                     _OPTION_REG	set	129
   138  0086                     _TRISB	set	134
   139                           
   140                           	psect	cinit
   141  000F                     start_initialization:	
   142                           ; #config settings
   143                           
   144  000F                     __initialization:
   145                           
   146                           ; Initialize objects allocated to BANK0
   147  000F  2108               	fcall	__pidataBANK0	;fetch initializer
   148  0010  00AA               	movwf	__pdataBANK0& (0+127)
   149  0011  2109               	fcall	__pidataBANK0+1	;fetch initializer
   150  0012  00AB               	movwf	(__pdataBANK0+1)& (0+127)
   151                           
   152                           ; Clear objects allocated to BANK0
   153  0013  1383               	bcf	3,7	;select IRP bank0
   154  0014  3020               	movlw	low __pbssBANK0
   155  0015  0084               	movwf	4
   156  0016  302A               	movlw	low (__pbssBANK0+10)
   157  0017  2100               	fcall	clear_ram0
   158                           
   159                           ; Clear objects allocated to COMMON
   160  0018  3070               	movlw	low __pbssCOMMON
   161  0019  0084               	movwf	4
   162  001A  3078               	movlw	low (__pbssCOMMON+8)
   163  001B  2100               	fcall	clear_ram0
   164  001C                     end_of_initialization:	
   165                           ;End of C runtime variable initialization code
   166                           
   167  001C                     __end_of__initialization:
   168  001C  0183               	clrf	3
   169  001D  28EE               	ljmp	_main	;jump to C main() function
   170                           
   171                           	psect	bssCOMMON
   172  0070                     __pbssCOMMON:
   173  0070                     _oldButton:
   174  0070                     	ds	2
   175  0072                     _button:
   176  0072                     	ds	2
   177  0074                     _timerSecondLedOff:
   178  0074                     	ds	2
   179  0076                     _timerFirstLed:
   180  0076                     	ds	2
   181                           
   182                           	psect	bssBANK0
   183  0020                     __pbssBANK0:
   184  0020                     _premuto:
   185  0020                     	ds	2
   186  0022                     _buttonState:
   187  0022                     	ds	2
   188  0024                     _statoSecondLedPost:
   189  0024                     	ds	2
   190  0026                     _statoSecondLedPre:
   191  0026                     	ds	2
   192  0028                     _timerSecondLedOn:
   193  0028                     	ds	2
   194                           
   195                           	psect	dataBANK0
   196  002A                     __pdataBANK0:
   197  002A                     _statoFirstLed:
   198  002A                     	ds	2
   199                           
   200                           	psect	clrtext
   201  0100                     clear_ram0:	
   202                           ;	Called with FSR containing the base address, and
   203                           ;	W with the last address+1
   204                           
   205  0100  0064               	clrwdt	;clear the watchdog before getting into this loop
   206  0101                     clrloop0:
   207  0101  0180               	clrf	0	;clear RAM location pointed to by FSR
   208  0102  0A84               	incf	4,f	;increment pointer
   209  0103  0604               	xorwf	4,w	;XOR with final address
   210  0104  1903               	btfsc	3,2	;have we reached the end yet?
   211  0105  3400               	retlw	0	;all done for this memory range, return
   212  0106  0604               	xorwf	4,w	;XOR again to restore value
   213  0107  2901               	goto	clrloop0	;do the next byte
   214                           
   215                           	psect	cstackCOMMON
   216  0078                     __pcstackCOMMON:
   217  0078                     ?_main:
   218  0078                     ?_lampeggio:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0078                     ??_lampeggio:	
   222                           ; 1 bytes @ 0x0
   223                           
   224                           
   225                           ; 1 bytes @ 0x0
   226  0078                     	ds	5
   227                           
   228                           	psect	cstackBANK0
   229  0000                     __pcstackBANK0:
   230  0000                     ??_main:
   231                           
   232                           	psect	maintext
   233  00EE                     __pmaintext:	
   234                           ; 1 bytes @ 0x0
   235 ;;
   236 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   237 ;;
   238 ;; *************** function _main *****************
   239 ;; Defined at:
   240 ;;		line 31 in file "main.c"
   241 ;; Parameters:    Size  Location     Type
   242 ;;		None
   243 ;; Auto vars:     Size  Location     Type
   244 ;;		None
   245 ;; Return value:  Size  Location     Type
   246 ;;                  1    wreg      void 
   247 ;; Registers used:
   248 ;;		wreg, status,2
   249 ;; Tracked objects:
   250 ;;		On entry : B00/0
   251 ;;		On exit  : 0/0
   252 ;;		Unchanged: 0/0
   253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   254 ;;      Params:         0       0       0       0
   255 ;;      Locals:         0       0       0       0
   256 ;;      Temps:          0       0       0       0
   257 ;;      Totals:         0       0       0       0
   258 ;;Total ram usage:        0 bytes
   259 ;; Hardware stack levels required when called:    1
   260 ;; This function calls:
   261 ;;		Nothing
   262 ;; This function is called by:
   263 ;;		Startup code after reset
   264 ;; This function uses a non-reentrant model
   265 ;;
   266                           
   267                           
   268                           ;psect for function _main
   269  00EE                     _main:
   270  00EE                     l777:	
   271                           ;incstack = 0
   272                           ; Regs used in _main: [wreg+status,2]
   273                           
   274                           
   275                           ;main.c: 32:     TMR0 = 256 - 250;
   276  00EE  3006               	movlw	6
   277  00EF  1283               	bcf	3,5	;RP0=0, select bank0
   278  00F0  1303               	bcf	3,6	;RP1=0, select bank0
   279  00F1  0081               	movwf	1	;volatile
   280  00F2                     l779:
   281                           
   282                           ;main.c: 33:     TRISB = 0x00;
   283  00F2  1683               	bsf	3,5	;RP0=1, select bank1
   284  00F3  1303               	bcf	3,6	;RP1=0, select bank1
   285  00F4  0186               	clrf	6	;volatile
   286  00F5                     l781:
   287                           
   288                           ;main.c: 34:     PORTB = 0x00;
   289  00F5  1283               	bcf	3,5	;RP0=0, select bank0
   290  00F6  1303               	bcf	3,6	;RP1=0, select bank0
   291  00F7  0186               	clrf	6	;volatile
   292                           
   293                           ;main.c: 35:     INTCON = 0xA0;
   294  00F8  30A0               	movlw	160
   295  00F9  008B               	movwf	11	;volatile
   296                           
   297                           ;main.c: 36:     OPTION_REG = 0x02;
   298  00FA  3002               	movlw	2
   299  00FB  1683               	bsf	3,5	;RP0=1, select bank1
   300  00FC  1303               	bcf	3,6	;RP1=0, select bank1
   301  00FD  0081               	movwf	1	;volatile
   302  00FE                     l37:	
   303                           ;main.c: 38:     while(1){
   304                           
   305  00FE                     l38:	
   306                           ;main.c: 40:     }
   307                           
   308  00FE  28FE               	goto	l37
   309  00FF  280E               	ljmp	start
   310  0100                     __end_of_main:
   311                           
   312                           	psect	text1
   313  001E                     __ptext1:	
   314 ;; *************** function _lampeggio *****************
   315 ;; Defined at:
   316 ;;		line 45 in file "main.c"
   317 ;; Parameters:    Size  Location     Type
   318 ;;		None
   319 ;; Auto vars:     Size  Location     Type
   320 ;;		None
   321 ;; Return value:  Size  Location     Type
   322 ;;                  1    wreg      void 
   323 ;; Registers used:
   324 ;;		wreg, status,2, status,0, btemp+1
   325 ;; Tracked objects:
   326 ;;		On entry : 0/0
   327 ;;		On exit  : 0/0
   328 ;;		Unchanged: 0/0
   329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   330 ;;      Params:         0       0       0       0
   331 ;;      Locals:         0       0       0       0
   332 ;;      Temps:          5       0       0       0
   333 ;;      Totals:         5       0       0       0
   334 ;;Total ram usage:        5 bytes
   335 ;; Hardware stack levels used:    1
   336 ;; This function calls:
   337 ;;		Nothing
   338 ;; This function is called by:
   339 ;;		Interrupt level 1
   340 ;; This function uses a non-reentrant model
   341 ;;
   342                           
   343                           
   344                           ;psect for function _lampeggio
   345  001E                     _lampeggio:
   346  001E                     i1l715:
   347                           
   348                           ;main.c: 47:     if(INTCON & 0x04){
   349  001E  1D0B               	btfss	11,2	;volatile
   350  001F  2821               	goto	u18_21
   351  0020  2822               	goto	u18_20
   352  0021                     u18_21:
   353  0021  28E5               	goto	i1l55
   354  0022                     u18_20:
   355  0022                     i1l717:
   356                           
   357                           ;main.c: 48:         timerFirstLed++;
   358  0022  3001               	movlw	1
   359  0023  07F6               	addwf	_timerFirstLed,f
   360  0024  1803               	skipnc
   361  0025  0AF7               	incf	_timerFirstLed+1,f
   362  0026  3000               	movlw	0
   363  0027  07F7               	addwf	_timerFirstLed+1,f
   364  0028                     i1l719:
   365                           
   366                           ;main.c: 50:         if(timerFirstLed >= 2000){
   367  0028  0877               	movf	_timerFirstLed+1,w
   368  0029  3A80               	xorlw	128
   369  002A  00FF               	movwf	btemp+1
   370  002B  3087               	movlw	135
   371  002C  027F               	subwf	btemp+1,w
   372  002D  1D03               	skipz
   373  002E  2831               	goto	u19_25
   374  002F  30D0               	movlw	208
   375  0030  0276               	subwf	_timerFirstLed,w
   376  0031                     u19_25:
   377  0031  1C03               	skipc
   378  0032  2834               	goto	u19_21
   379  0033  2835               	goto	u19_20
   380  0034                     u19_21:
   381  0034  284C               	goto	i1l731
   382  0035                     u19_20:
   383  0035                     i1l721:
   384                           
   385                           ;main.c: 51:             if(statoFirstLed == 1){
   386  0035  1283               	bcf	3,5	;RP0=0, select bank0
   387  0036  1303               	bcf	3,6	;RP1=0, select bank0
   388  0037  032A               	decf	_statoFirstLed,w
   389  0038  042B               	iorwf	_statoFirstLed+1,w
   390  0039  1D03               	btfss	3,2
   391  003A  283C               	goto	u20_21
   392  003B  283D               	goto	u20_20
   393  003C                     u20_21:
   394  003C  2843               	goto	i1l727
   395  003D                     u20_20:
   396  003D                     i1l723:
   397                           
   398                           ;main.c: 52:                 statoFirstLed = 0;
   399  003D  01AA               	clrf	_statoFirstLed
   400  003E  01AB               	clrf	_statoFirstLed+1
   401  003F                     i1l725:
   402                           
   403                           ;main.c: 53:                 PORTB = PORTB & 0x02;
   404  003F  0806               	movf	6,w	;volatile
   405  0040  3902               	andlw	2
   406  0041  0086               	movwf	6	;volatile
   407                           
   408                           ;main.c: 54:             }else{
   409  0042  284A               	goto	i1l48
   410  0043                     i1l727:
   411                           
   412                           ;main.c: 55:                 statoFirstLed = 1;
   413  0043  3001               	movlw	1
   414  0044  00AA               	movwf	_statoFirstLed
   415  0045  3000               	movlw	0
   416  0046  00AB               	movwf	_statoFirstLed+1
   417  0047                     i1l729:
   418                           
   419                           ;main.c: 56:                 PORTB = PORTB | 0x01;
   420  0047  0806               	movf	6,w	;volatile
   421  0048  3801               	iorlw	1
   422  0049  0086               	movwf	6	;volatile
   423  004A                     i1l48:	
   424                           ;main.c: 57:             }
   425                           
   426                           
   427                           ;main.c: 58:             timerFirstLed = 0;
   428  004A  01F6               	clrf	_timerFirstLed
   429  004B  01F7               	clrf	_timerFirstLed+1
   430  004C                     i1l731:
   431                           
   432                           ;main.c: 61:         if(statoSecondLedPre == 1){
   433  004C  1283               	bcf	3,5	;RP0=0, select bank0
   434  004D  1303               	bcf	3,6	;RP1=0, select bank0
   435  004E  0326               	decf	_statoSecondLedPre,w
   436  004F  0427               	iorwf	_statoSecondLedPre+1,w
   437  0050  1D03               	btfss	3,2
   438  0051  2853               	goto	u21_21
   439  0052  2854               	goto	u21_20
   440  0053                     u21_21:
   441  0053  2874               	goto	i1l745
   442  0054                     u21_20:
   443  0054                     i1l733:
   444                           
   445                           ;main.c: 62:             timerSecondLedOff++;
   446  0054  3001               	movlw	1
   447  0055  07F4               	addwf	_timerSecondLedOff,f
   448  0056  1803               	skipnc
   449  0057  0AF5               	incf	_timerSecondLedOff+1,f
   450  0058  3000               	movlw	0
   451  0059  07F5               	addwf	_timerSecondLedOff+1,f
   452  005A                     i1l735:
   453                           
   454                           ;main.c: 63:             if(timerSecondLedOff >= 5000){
   455  005A  0875               	movf	_timerSecondLedOff+1,w
   456  005B  3A80               	xorlw	128
   457  005C  00FF               	movwf	btemp+1
   458  005D  3093               	movlw	147
   459  005E  027F               	subwf	btemp+1,w
   460  005F  1D03               	skipz
   461  0060  2863               	goto	u22_25
   462  0061  3088               	movlw	136
   463  0062  0274               	subwf	_timerSecondLedOff,w
   464  0063                     u22_25:
   465  0063  1C03               	skipc
   466  0064  2866               	goto	u22_21
   467  0065  2867               	goto	u22_20
   468  0066                     u22_21:
   469  0066  2874               	goto	i1l745
   470  0067                     u22_20:
   471  0067                     i1l737:
   472                           
   473                           ;main.c: 64:                 PORTB = PORTB | 0x02;
   474  0067  1283               	bcf	3,5	;RP0=0, select bank0
   475  0068  1303               	bcf	3,6	;RP1=0, select bank0
   476  0069  0806               	movf	6,w	;volatile
   477  006A  3802               	iorlw	2
   478  006B  0086               	movwf	6	;volatile
   479  006C                     i1l739:
   480                           
   481                           ;main.c: 65:                 timerSecondLedOff = 0;
   482  006C  01F4               	clrf	_timerSecondLedOff
   483  006D  01F5               	clrf	_timerSecondLedOff+1
   484  006E                     i1l741:
   485                           
   486                           ;main.c: 66:                 statoSecondLedPre=0;
   487  006E  01A6               	clrf	_statoSecondLedPre
   488  006F  01A7               	clrf	_statoSecondLedPre+1
   489  0070                     i1l743:
   490                           
   491                           ;main.c: 67:                 statoSecondLedPost=1;
   492  0070  3001               	movlw	1
   493  0071  00A4               	movwf	_statoSecondLedPost
   494  0072  3000               	movlw	0
   495  0073  00A5               	movwf	_statoSecondLedPost+1
   496  0074                     i1l745:
   497                           
   498                           ;main.c: 71:         if(statoSecondLedPost == 1){
   499  0074  1283               	bcf	3,5	;RP0=0, select bank0
   500  0075  1303               	bcf	3,6	;RP1=0, select bank0
   501  0076  0324               	decf	_statoSecondLedPost,w
   502  0077  0425               	iorwf	_statoSecondLedPost+1,w
   503  0078  1D03               	btfss	3,2
   504  0079  287B               	goto	u23_21
   505  007A  287C               	goto	u23_20
   506  007B                     u23_21:
   507  007B  2898               	goto	i1l51
   508  007C                     u23_20:
   509  007C                     i1l747:
   510                           
   511                           ;main.c: 72:             timerSecondLedOn++;
   512  007C  3001               	movlw	1
   513  007D  07A8               	addwf	_timerSecondLedOn,f
   514  007E  1803               	skipnc
   515  007F  0AA9               	incf	_timerSecondLedOn+1,f
   516  0080  3000               	movlw	0
   517  0081  07A9               	addwf	_timerSecondLedOn+1,f
   518  0082                     i1l749:
   519                           
   520                           ;main.c: 73:             if(timerSecondLedOn >= 4000){
   521  0082  0829               	movf	_timerSecondLedOn+1,w
   522  0083  3A80               	xorlw	128
   523  0084  00FF               	movwf	btemp+1
   524  0085  308F               	movlw	143
   525  0086  027F               	subwf	btemp+1,w
   526  0087  1D03               	skipz
   527  0088  288B               	goto	u24_25
   528  0089  30A0               	movlw	160
   529  008A  0228               	subwf	_timerSecondLedOn,w
   530  008B                     u24_25:
   531  008B  1C03               	skipc
   532  008C  288E               	goto	u24_21
   533  008D  288F               	goto	u24_20
   534  008E                     u24_21:
   535  008E  2898               	goto	i1l51
   536  008F                     u24_20:
   537  008F                     i1l751:
   538                           
   539                           ;main.c: 74:                 timerSecondLedOn=0;
   540  008F  1283               	bcf	3,5	;RP0=0, select bank0
   541  0090  1303               	bcf	3,6	;RP1=0, select bank0
   542  0091  01A8               	clrf	_timerSecondLedOn
   543  0092  01A9               	clrf	_timerSecondLedOn+1
   544                           
   545                           ;main.c: 75:                 statoSecondLedPost=0;
   546  0093  01A4               	clrf	_statoSecondLedPost
   547  0094  01A5               	clrf	_statoSecondLedPost+1
   548  0095                     i1l753:
   549                           
   550                           ;main.c: 76:                 PORTB = PORTB & 0x01;
   551  0095  0806               	movf	6,w	;volatile
   552  0096  3901               	andlw	1
   553  0097  0086               	movwf	6	;volatile
   554  0098                     i1l51:	
   555                           ;main.c: 78:         }
   556                           
   557                           
   558                           ;main.c: 80:         button = !(PORTA & 0x04);
   559  0098  1283               	bcf	3,5	;RP0=0, select bank0
   560  0099  1303               	bcf	3,6	;RP1=0, select bank0
   561  009A  1D05               	btfss	5,2	;volatile
   562  009B  289D               	goto	u25_21
   563  009C  289F               	goto	u25_20
   564  009D                     u25_21:
   565  009D  3001               	movlw	1
   566  009E  28A0               	goto	u26_20
   567  009F                     u25_20:
   568  009F  3000               	movlw	0
   569  00A0                     u26_20:
   570  00A0  00F8               	movwf	??_lampeggio
   571  00A1  01F9               	clrf	??_lampeggio+1
   572  00A2  0878               	movf	??_lampeggio,w
   573  00A3  00F2               	movwf	_button
   574  00A4  0879               	movf	??_lampeggio+1,w
   575  00A5  00F3               	movwf	_button+1
   576  00A6                     i1l755:
   577                           
   578                           ;main.c: 81:         if((button == 1) && (oldButton == 0)) {
   579  00A6  0372               	decf	_button,w
   580  00A7  0473               	iorwf	_button+1,w
   581  00A8  1D03               	btfss	3,2
   582  00A9  28AB               	goto	u27_21
   583  00AA  28AC               	goto	u27_20
   584  00AB                     u27_21:
   585  00AB  28DE               	goto	i1l771
   586  00AC                     u27_20:
   587  00AC                     i1l757:
   588  00AC  0870               	movf	_oldButton,w
   589  00AD  0471               	iorwf	_oldButton+1,w
   590  00AE  1D03               	btfss	3,2
   591  00AF  28B1               	goto	u28_21
   592  00B0  28B2               	goto	u28_20
   593  00B1                     u28_21:
   594  00B1  28DE               	goto	i1l771
   595  00B2                     u28_20:
   596  00B2                     i1l759:
   597                           
   598                           ;main.c: 84:             button = !(PORTA & 0x04);
   599  00B2  1D05               	btfss	5,2	;volatile
   600  00B3  28B5               	goto	u29_21
   601  00B4  28B7               	goto	u29_20
   602  00B5                     u29_21:
   603  00B5  3001               	movlw	1
   604  00B6  28B8               	goto	u30_20
   605  00B7                     u29_20:
   606  00B7  3000               	movlw	0
   607  00B8                     u30_20:
   608  00B8  00F8               	movwf	??_lampeggio
   609  00B9  01F9               	clrf	??_lampeggio+1
   610  00BA  0878               	movf	??_lampeggio,w
   611  00BB  00F2               	movwf	_button
   612  00BC  0879               	movf	??_lampeggio+1,w
   613  00BD  00F3               	movwf	_button+1
   614  00BE                     i1l761:
   615                           
   616                           ;main.c: 85:             if((button == 1) && (oldButton == 0)){
   617  00BE  0372               	decf	_button,w
   618  00BF  0473               	iorwf	_button+1,w
   619  00C0  1D03               	btfss	3,2
   620  00C1  28C3               	goto	u31_21
   621  00C2  28C4               	goto	u31_20
   622  00C3                     u31_21:
   623  00C3  28DE               	goto	i1l771
   624  00C4                     u31_20:
   625  00C4                     i1l763:
   626  00C4  0870               	movf	_oldButton,w
   627  00C5  0471               	iorwf	_oldButton+1,w
   628  00C6  1D03               	btfss	3,2
   629  00C7  28C9               	goto	u32_21
   630  00C8  28CA               	goto	u32_20
   631  00C9                     u32_21:
   632  00C9  28DE               	goto	i1l771
   633  00CA                     u32_20:
   634  00CA                     i1l765:
   635                           
   636                           ;main.c: 86:                 buttonState = !buttonState;
   637  00CA  0822               	movf	_buttonState,w
   638  00CB  0423               	iorwf	_buttonState+1,w
   639  00CC  1903               	btfsc	3,2
   640  00CD  28CF               	goto	u33_21
   641  00CE  28D1               	goto	u33_20
   642  00CF                     u33_21:
   643  00CF  3001               	movlw	1
   644  00D0  28D2               	goto	u34_20
   645  00D1                     u33_20:
   646  00D1  3000               	movlw	0
   647  00D2                     u34_20:
   648  00D2  00F8               	movwf	??_lampeggio
   649  00D3  01F9               	clrf	??_lampeggio+1
   650  00D4  0878               	movf	??_lampeggio,w
   651  00D5  00A2               	movwf	_buttonState
   652  00D6  0879               	movf	??_lampeggio+1,w
   653  00D7  00A3               	movwf	_buttonState+1
   654  00D8                     i1l767:
   655                           
   656                           ;main.c: 87:                 statoSecondLedPre = 1;
   657  00D8  3001               	movlw	1
   658  00D9  00A6               	movwf	_statoSecondLedPre
   659  00DA  3000               	movlw	0
   660  00DB  00A7               	movwf	_statoSecondLedPre+1
   661  00DC                     i1l769:
   662                           
   663                           ;main.c: 88:                 timerSecondLedOff = 0;
   664  00DC  01F4               	clrf	_timerSecondLedOff
   665  00DD  01F5               	clrf	_timerSecondLedOff+1
   666  00DE                     i1l771:
   667                           
   668                           ;main.c: 91:         oldButton = button;
   669  00DE  0873               	movf	_button+1,w
   670  00DF  00F1               	movwf	_oldButton+1
   671  00E0  0872               	movf	_button,w
   672  00E1  00F0               	movwf	_oldButton
   673  00E2                     i1l773:
   674                           
   675                           ;main.c: 93:         INTCON = INTCON & ~0x04;
   676  00E2  080B               	movf	11,w	;volatile
   677  00E3  39FB               	andlw	251
   678  00E4  008B               	movwf	11	;volatile
   679  00E5                     i1l55:
   680  00E5  087C               	movf	??_lampeggio+4,w
   681  00E6  00FF               	movwf	btemp+1
   682  00E7  087B               	movf	??_lampeggio+3,w
   683  00E8  008A               	movwf	10
   684  00E9  0E7A               	swapf	??_lampeggio+2,w
   685  00EA  0083               	movwf	3
   686  00EB  0EFE               	swapf	btemp,f
   687  00EC  0E7E               	swapf	btemp,w
   688  00ED  0009               	retfie
   689  00EE                     __end_of_lampeggio:
   690  007E                     btemp	set	126	;btemp
   691  007E                     wtemp0	set	126
   692                           
   693                           	psect	intentry
   694  0004                     __pintentry:	
   695                           ;incstack = 0
   696                           ; Regs used in _lampeggio: [wreg+status,2+status,0+btemp+1]
   697                           
   698  0004                     interrupt_function:
   699  007E                     saved_w	set	btemp
   700  0004  00FE               	movwf	btemp
   701  0005  0E03               	swapf	3,w
   702  0006  00FA               	movwf	??_lampeggio+2
   703  0007  080A               	movf	10,w
   704  0008  00FB               	movwf	??_lampeggio+3
   705  0009  1283               	bcf	3,5	;RP0=0, select bank0
   706  000A  1303               	bcf	3,6	;RP1=0, select bank0
   707  000B  087F               	movf	btemp+1,w
   708  000C  00FC               	movwf	??_lampeggio+4
   709  000D  281E               	ljmp	_lampeggio
   710                           
   711                           	psect	config
   712                           
   713                           ;Config register CONFIG @ 0x2007
   714                           ;	Oscillator Selection bits
   715                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   716                           ;	Watchdog Timer Enable bit
   717                           ;	WDTE = OFF, WDT disabled
   718                           ;	Power-up Timer Enable bit
   719                           ;	PWRTE = ON, PWRT enabled
   720                           ;	RA5/MCLR/VPP Pin Function Select bit
   721                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
   722                           ;	Brown-out Detect Enable bit
   723                           ;	BOREN = ON, BOD enabled
   724                           ;	Low-Voltage Programming Enable bit
   725                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
   726                           ;	Data EE Memory Code Protection bit
   727                           ;	CPD = OFF, Data memory code protection off
   728                           ;	Flash Program Memory Code Protection bit
   729                           ;	CP = OFF, Code protection off
   730  2007                     	org	8199
   731  2007  3F62               	dw	16226

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      13
    BANK0            80      0      12
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _lampeggio in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _lampeggio in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _lampeggio in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _lampeggio in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _lampeggio                                            5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _lampeggio (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       C       3       15.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      19      10        0.0%
ABS                  0      0      19       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Nov 30 16:01:04 2020

                     l37 00FE                       l38 00FE                       fsr 0004  
      _statoSecondLedPre 0026                      l781 00F5                      l777 00EE  
                    l779 00F2                      indf 0000       _statoSecondLedPost 0024  
                   i1l51 0098                     i1l55 00E5                     i1l48 004A  
                   _TMR0 0001            _statoFirstLed 002A                     _main 00EE  
                   btemp 007E                     start 000E                    ?_main 0078  
                  i1l721 0035                    i1l723 003D                    i1l731 004C  
                  i1l715 001E                    i1l741 006E                    i1l733 0054  
                  i1l725 003F                    i1l717 0022                    i1l751 008F  
                  i1l743 0070                    i1l735 005A                    i1l727 0043  
                  i1l719 0028                    i1l761 00BE                    i1l753 0095  
                  i1l737 0067                    i1l745 0074                    i1l729 0047  
                  i1l763 00C4                    i1l771 00DE                    i1l755 00A6  
                  i1l747 007C                    i1l739 006C                    i1l773 00E2  
                  i1l765 00CA                    i1l757 00AC                    i1l749 0082  
                  i1l767 00D8                    i1l759 00B2                    i1l769 00DC  
                  u20_20 003D                    u20_21 003C                    u21_20 0054  
                  u21_21 0053                    u30_20 00B8                    u22_20 0067  
                  u22_21 0066                    u22_25 0063                    u31_20 00C4  
                  u23_20 007C                    u31_21 00C3                    u23_21 007B  
                  u32_20 00CA                    u24_20 008F                    u32_21 00C9  
                  u24_21 008E                    u24_25 008B                    u33_20 00D1  
                  u25_20 009F                    u33_21 00CF                    u25_21 009D  
                  u34_20 00D2                    u26_20 00A0                    u18_20 0022  
                  u18_21 0021                    u27_20 00AC                    u19_20 0035  
                  u27_21 00AB                    u19_21 0034                    _PORTA 0005  
                  _PORTB 0006                    u19_25 0031                    u28_20 00B2  
                  u28_21 00B1                    u29_20 00B7                    u29_21 00B5  
                  _TRISB 0086                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 0100  
                 ??_main 0000                   _INTCON 000B                   _button 0072  
                 saved_w 007E  __end_of__initialization 001C           __pcstackCOMMON 0078  
           __pidataBANK0 0108               __pbssBANK0 0020       __size_of_lampeggio 00D0  
             __pmaintext 00EE               __pintentry 0004        __end_of_lampeggio 00EE  
                __ptext1 001E                  _premuto 0020                  clrloop0 0101  
   end_of_initialization 001C        _timerSecondLedOff 0074      start_initialization 000F  
            __pdataBANK0 002A              __pbssCOMMON 0070                ___latbits 0000  
          __pcstackBANK0 0000                _lampeggio 001E                _oldButton 0070  
      interrupt_function 0004                clear_ram0 0100               ?_lampeggio 0078  
       _timerSecondLedOn 0028              _buttonState 0022            _timerFirstLed 0076  
          __size_of_main 0012              ??_lampeggio 0078                 intlevel1 0000  
             _OPTION_REG 0081  
