

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Nov 18 10:15:12 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F628
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.20
    15                           ; Generated 12/02/2020 GMT
    16                           ; 
    17                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F628 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0015                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001F                     	;# 
    72  0081                     	;# 
    73  0085                     	;# 
    74  0086                     	;# 
    75  008C                     	;# 
    76  008E                     	;# 
    77  0092                     	;# 
    78  0098                     	;# 
    79  0099                     	;# 
    80  009A                     	;# 
    81  009B                     	;# 
    82  009C                     	;# 
    83  009D                     	;# 
    84  009F                     	;# 
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  008C                     	;# 
   113  008E                     	;# 
   114  0092                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009F                     	;# 
   122  0005                     _PORTA	set	5
   123  0006                     _PORTB	set	6
   124  0086                     _TRISB	set	134
   125  0085                     _TRISA	set	133
   126                           
   127                           	psect	strings
   128  0001                     __pstrings:
   129  0001                     stringtab:
   130  0001                     __stringtab:
   131                           
   132                           ;	String table - string pointers are 1 byte each
   133  0001  1BFF               	btfsc	btemp+1,7
   134  0002  280B               	ljmp	stringcode
   135  0003  1383               	bcf	3,7
   136  0004  187F               	btfsc	btemp+1,0
   137  0005  1783               	bsf	3,7
   138  0006  0800               	movf	0,w
   139  0007  0A84               	incf	4,f
   140  0008  1903               	skipnz
   141  0009  0AFF               	incf	btemp+1,f
   142  000A  0008               	return
   143  000B                     stringcode:
   144  000B                     stringdir:
   145  000B  3000               	movlw	high stringdir
   146  000C  008A               	movwf	10
   147  000D  0804               	movf	4,w
   148  000E  0A84               	incf	4,f
   149  000F  0782               	addwf	2,f
   150  0010                     __stringbase:
   151  0010  3400               	retlw	0
   152  0011                     __end_of__stringtab:
   153  0011                     STR_2:
   154  0011  3428               	retlw	40	;'('
   155  0012  346E               	retlw	110	;'n'
   156  0013  3475               	retlw	117	;'u'
   157  0014  346C               	retlw	108	;'l'
   158  0015  346C               	retlw	108	;'l'
   159  0016  3429               	retlw	41	;')'
   160  0017  3400               	retlw	0
   161  0018                     STR_1:
   162  0018  3425               	retlw	37	;'%'
   163  0019  3473               	retlw	115	;'s'
   164  001A  3400               	retlw	0
   165                           
   166                           	psect	cinit
   167  07FE                     start_initialization:	
   168                           ; #config settings
   169                           
   170  07FE                     __initialization:
   171  07FE                     end_of_initialization:	
   172                           ;End of C runtime variable initialization code
   173                           
   174  07FE                     __end_of__initialization:
   175  07FE  0183               	clrf	3
   176  07FF  2F0A               	ljmp	_main	;jump to C main() function
   177                           
   178                           	psect	cstackCOMMON
   179  0070                     __pcstackCOMMON:
   180  0070                     ?_putch:
   181  0070                     ??_putch:	
   182                           ; 1 bytes @ 0x0
   183                           
   184  0070                     ?_main:	
   185                           ; 1 bytes @ 0x0
   186                           
   187  0070                     ?_printf:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  0070                     putch@c:	
   191                           ; 2 bytes @ 0x0
   192                           
   193                           
   194                           ; 1 bytes @ 0x0
   195  0070                     	ds	2
   196  0072                     ??_printf:
   197                           
   198                           ; 1 bytes @ 0x2
   199  0072                     	ds	3
   200  0075                     printf@ap:
   201                           
   202                           ; 1 bytes @ 0x5
   203  0075                     	ds	1
   204  0076                     printf@f:
   205                           
   206                           ; 1 bytes @ 0x6
   207  0076                     	ds	1
   208  0077                     printf@c:
   209                           
   210                           ; 1 bytes @ 0x7
   211  0077                     	ds	1
   212  0078                     printf@cp:
   213                           
   214                           ; 2 bytes @ 0x8
   215  0078                     	ds	2
   216  007A                     ??_main:
   217                           
   218                           ; 1 bytes @ 0xA
   219  007A                     	ds	3
   220                           
   221                           	psect	cstackBANK0
   222  0020                     __pcstackBANK0:
   223  0020                     main@state:
   224                           
   225                           ; 1 bytes @ 0x0
   226  0020                     	ds	1
   227  0021                     main@oldPort:
   228                           
   229                           ; 1 bytes @ 0x1
   230  0021                     	ds	1
   231  0022                     main@i:
   232                           
   233                           ; 2 bytes @ 0x2
   234  0022                     	ds	2
   235  0024                     main@oldButton:
   236                           
   237                           ; 1 bytes @ 0x4
   238  0024                     	ds	1
   239  0025                     main@k:
   240                           
   241                           ; 2 bytes @ 0x5
   242  0025                     	ds	2
   243  0027                     main@button:
   244                           
   245                           ; 1 bytes @ 0x7
   246  0027                     	ds	1
   247  0028                     main@x:
   248                           
   249                           ; 2 bytes @ 0x8
   250  0028                     	ds	2
   251                           
   252                           	psect	maintext
   253  070A                     __pmaintext:	
   254 ;;
   255 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   256 ;;
   257 ;; *************** function _main *****************
   258 ;; Defined at:
   259 ;;		line 29 in file "main.c"
   260 ;; Parameters:    Size  Location     Type
   261 ;;		None
   262 ;; Auto vars:     Size  Location     Type
   263 ;;  x               2    8[BANK0 ] int 
   264 ;;  k               2    5[BANK0 ] int 
   265 ;;  i               2    2[BANK0 ] int 
   266 ;;  button          1    7[BANK0 ] unsigned char 
   267 ;;  oldButton       1    4[BANK0 ] unsigned char 
   268 ;;  oldPort         1    1[BANK0 ] unsigned char 
   269 ;;  state           1    0[BANK0 ] unsigned char 
   270 ;; Return value:  Size  Location     Type
   271 ;;                  1    wreg      void 
   272 ;; Registers used:
   273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   274 ;; Tracked objects:
   275 ;;		On entry : B00/0
   276 ;;		On exit  : 0/0
   277 ;;		Unchanged: 0/0
   278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   279 ;;      Params:         0       0       0       0
   280 ;;      Locals:         0      10       0       0
   281 ;;      Temps:          3       0       0       0
   282 ;;      Totals:         3      10       0       0
   283 ;;Total ram usage:       13 bytes
   284 ;; Hardware stack levels required when called:    2
   285 ;; This function calls:
   286 ;;		_printf
   287 ;; This function is called by:
   288 ;;		Startup code after reset
   289 ;; This function uses a non-reentrant model
   290 ;;
   291                           
   292                           
   293                           ;psect for function _main
   294  070A                     _main:
   295  070A                     l856:	
   296                           ;incstack = 0
   297                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   298                           
   299                           
   300                           ;main.c: 31:     TRISA = 0b00000100;
   301  070A  3004               	movlw	4
   302  070B  1683               	bsf	3,5	;RP0=1, select bank1
   303  070C  1303               	bcf	3,6	;RP1=0, select bank1
   304  070D  0085               	movwf	5	;volatile
   305  070E                     l858:
   306                           
   307                           ;main.c: 32:     TRISB = 0x00;
   308  070E  0186               	clrf	6	;volatile
   309  070F                     l860:
   310                           
   311                           ;main.c: 33:     PORTB = 0x00;
   312  070F  1283               	bcf	3,5	;RP0=0, select bank0
   313  0710  1303               	bcf	3,6	;RP1=0, select bank0
   314  0711  0186               	clrf	6	;volatile
   315  0712                     l862:
   316  0712                     l864:
   317                           
   318                           ;main.c: 36:     char oldButton = 0;
   319  0712  01A4               	clrf	main@oldButton
   320  0713                     l866:
   321                           
   322                           ;main.c: 37:     char state = 0;
   323  0713  01A0               	clrf	main@state
   324  0714                     l868:
   325                           
   326                           ;main.c: 38:     int i = 0;
   327  0714  01A2               	clrf	main@i
   328  0715  01A3               	clrf	main@i+1
   329  0716                     l870:
   330  0716                     l872:
   331                           
   332                           ;main.c: 43:         button = !(PORTA & 0x04);
   333  0716  1283               	bcf	3,5	;RP0=0, select bank0
   334  0717  1303               	bcf	3,6	;RP1=0, select bank0
   335  0718  1D05               	btfss	5,2	;volatile
   336  0719  2F1B               	goto	u251
   337  071A  2F1D               	goto	u250
   338  071B                     u251:
   339  071B  3001               	movlw	1
   340  071C  2F1E               	goto	u260
   341  071D                     u250:
   342  071D  3000               	movlw	0
   343  071E                     u260:
   344  071E  00FA               	movwf	??_main
   345  071F  087A               	movf	??_main,w
   346  0720  00A7               	movwf	main@button
   347  0721                     l874:
   348                           
   349                           ;main.c: 44:         if((button == 1) && (oldButton == 0)) {
   350  0721  0327               	decf	main@button,w
   351  0722  1D03               	btfss	3,2
   352  0723  2F25               	goto	u271
   353  0724  2F26               	goto	u270
   354  0725                     u271:
   355  0725  2F59               	goto	l892
   356  0726                     u270:
   357  0726                     l876:
   358  0726  0824               	movf	main@oldButton,w
   359  0727  1D03               	btfss	3,2
   360  0728  2F2A               	goto	u281
   361  0729  2F2B               	goto	u280
   362  072A                     u281:
   363  072A  2F59               	goto	l892
   364  072B                     u280:
   365  072B                     l878:
   366                           
   367                           ;main.c: 47:             _delay((unsigned long)((20)*(8000000/4000.0)));
   368  072B  3034               	movlw	52
   369  072C  00FB               	movwf	??_main+1
   370  072D  30F1               	movlw	241
   371  072E  00FA               	movwf	??_main
   372  072F                     u417:
   373  072F  0BFA               	decfsz	??_main,f
   374  0730  2F2F               	goto	u417
   375  0731  0BFB               	decfsz	??_main+1,f
   376  0732  2F2F               	goto	u417
   377  0733  2F34               	nop2
   378                           
   379                           ;main.c: 48:             button = !(PORTA & 0x04);
   380  0734  1283               	bcf	3,5	;RP0=0, select bank0
   381  0735  1303               	bcf	3,6	;RP1=0, select bank0
   382  0736  1D05               	btfss	5,2	;volatile
   383  0737  2F39               	goto	u291
   384  0738  2F3B               	goto	u290
   385  0739                     u291:
   386  0739  3001               	movlw	1
   387  073A  2F3C               	goto	u300
   388  073B                     u290:
   389  073B  3000               	movlw	0
   390  073C                     u300:
   391  073C  00FA               	movwf	??_main
   392  073D  087A               	movf	??_main,w
   393  073E  00A7               	movwf	main@button
   394  073F                     l880:
   395                           
   396                           ;main.c: 49:             if((button == 1) && (oldButton == 0)){
   397  073F  0327               	decf	main@button,w
   398  0740  1D03               	btfss	3,2
   399  0741  2F43               	goto	u311
   400  0742  2F44               	goto	u310
   401  0743                     u311:
   402  0743  2F59               	goto	l892
   403  0744                     u310:
   404  0744                     l882:
   405  0744  0824               	movf	main@oldButton,w
   406  0745  1D03               	btfss	3,2
   407  0746  2F48               	goto	u321
   408  0747  2F49               	goto	u320
   409  0748                     u321:
   410  0748  2F59               	goto	l892
   411  0749                     u320:
   412  0749                     l884:
   413                           
   414                           ;main.c: 50:                 state = !state;
   415  0749  0820               	movf	main@state,w
   416  074A  1903               	btfsc	3,2
   417  074B  2F4D               	goto	u331
   418  074C  2F4F               	goto	u330
   419  074D                     u331:
   420  074D  3001               	movlw	1
   421  074E  2F50               	goto	u340
   422  074F                     u330:
   423  074F  3000               	movlw	0
   424  0750                     u340:
   425  0750  00FA               	movwf	??_main
   426  0751  087A               	movf	??_main,w
   427  0752  00A0               	movwf	main@state
   428  0753                     l886:
   429                           
   430                           ;main.c: 51:                 i++;
   431  0753  3001               	movlw	1
   432  0754  07A2               	addwf	main@i,f
   433  0755  1803               	skipnc
   434  0756  0AA3               	incf	main@i+1,f
   435  0757  3000               	movlw	0
   436  0758  07A3               	addwf	main@i+1,f
   437  0759                     l888:
   438  0759                     l890:
   439  0759                     l892:
   440                           
   441                           ;main.c: 56:         oldButton = button;
   442  0759  0827               	movf	main@button,w
   443  075A  00FA               	movwf	??_main
   444  075B  087A               	movf	??_main,w
   445  075C  00A4               	movwf	main@oldButton
   446  075D                     l894:
   447                           
   448                           ;main.c: 58:         if(i == 2){
   449  075D  3002               	movlw	2
   450  075E  0622               	xorwf	main@i,w
   451  075F  0423               	iorwf	main@i+1,w
   452  0760  1D03               	btfss	3,2
   453  0761  2F63               	goto	u351
   454  0762  2F64               	goto	u350
   455  0763                     u351:
   456  0763  2FF0               	goto	l938
   457  0764                     u350:
   458  0764                     l896:
   459                           
   460                           ;main.c: 59:             i = 0;
   461  0764  01A2               	clrf	main@i
   462  0765  01A3               	clrf	main@i+1
   463  0766  2FF0               	goto	l938
   464  0767                     l898:
   465                           
   466                           ;main.c: 64:                for(x = 0; x < 8; x++){
   467  0767  01A8               	clrf	main@x
   468  0768  01A9               	clrf	main@x+1
   469  0769                     l900:
   470  0769  0829               	movf	main@x+1,w
   471  076A  3A80               	xorlw	128
   472  076B  00FF               	movwf	btemp+1
   473  076C  3080               	movlw	128
   474  076D  027F               	subwf	btemp+1,w
   475  076E  1D03               	skipz
   476  076F  2F72               	goto	u365
   477  0770  3008               	movlw	8
   478  0771  0228               	subwf	main@x,w
   479  0772                     u365:
   480  0772  1C03               	skipc
   481  0773  2F75               	goto	u361
   482  0774  2F76               	goto	u360
   483  0775                     u361:
   484  0775  2F77               	goto	l904
   485  0776                     u360:
   486  0776  2F16               	goto	l872
   487  0777                     l904:
   488                           
   489                           ;main.c: 65:                     PORTB = 0x03 << x;
   490  0777  3003               	movlw	3
   491  0778  00FA               	movwf	??_main
   492  0779  1283               	bcf	3,5	;RP0=0, select bank0
   493  077A  1303               	bcf	3,6	;RP1=0, select bank0
   494  077B  0A28               	incf	main@x,w
   495  077C  2F7F               	goto	u374
   496  077D                     u375:
   497  077D  1003               	clrc
   498  077E  0DFA               	rlf	??_main,f
   499  077F                     u374:
   500  077F  3EFF               	addlw	-1
   501  0780  1D03               	skipz
   502  0781  2F7D               	goto	u375
   503  0782  087A               	movf	??_main,w
   504  0783  0086               	movwf	6	;volatile
   505  0784                     l906:
   506                           
   507                           ;main.c: 66:                     _delay((unsigned long)((100)*(8000000/4000.0)));
   508  0784  3002               	movlw	2
   509  0785  00FC               	movwf	??_main+2
   510  0786  3004               	movlw	4
   511  0787  00FB               	movwf	??_main+1
   512  0788  30BA               	movlw	186
   513  0789  00FA               	movwf	??_main
   514  078A                     u427:
   515  078A  0BFA               	decfsz	??_main,f
   516  078B  2F8A               	goto	u427
   517  078C  0BFB               	decfsz	??_main+1,f
   518  078D  2F8A               	goto	u427
   519  078E  0BFC               	decfsz	??_main+2,f
   520  078F  2F8A               	goto	u427
   521  0790  0000               	nop
   522  0791                     l908:
   523                           
   524                           ;main.c: 67:                }
   525  0791  3001               	movlw	1
   526  0792  1283               	bcf	3,5	;RP0=0, select bank0
   527  0793  1303               	bcf	3,6	;RP1=0, select bank0
   528  0794  07A8               	addwf	main@x,f
   529  0795  1803               	skipnc
   530  0796  0AA9               	incf	main@x+1,f
   531  0797  3000               	movlw	0
   532  0798  07A9               	addwf	main@x+1,f
   533  0799  2F69               	goto	l900
   534  079A                     l26:	
   535                           ;main.c: 69:             case 1:
   536                           
   537                           
   538                           ;main.c: 70:                 oldPort = 0x01;
   539  079A  01A1               	clrf	main@oldPort
   540  079B  0AA1               	incf	main@oldPort,f
   541  079C                     l912:
   542                           
   543                           ;main.c: 71:                 for(x=7; x>=0; x--){
   544  079C  3007               	movlw	7
   545  079D  00A8               	movwf	main@x
   546  079E  3000               	movlw	0
   547  079F  00A9               	movwf	main@x+1
   548  07A0                     l914:
   549  07A0  1FA9               	btfss	main@x+1,7
   550  07A1  2FA3               	goto	u381
   551  07A2  2FA4               	goto	u380
   552  07A3                     u381:
   553  07A3  2FA5               	goto	l918
   554  07A4                     u380:
   555  07A4  2F16               	goto	l872
   556  07A5                     l918:
   557                           
   558                           ;main.c: 72:                     for(k=0; k <= x; k++){
   559  07A5  01A5               	clrf	main@k
   560  07A6  01A6               	clrf	main@k+1
   561  07A7  2FCA               	goto	l926
   562  07A8                     l920:
   563                           
   564                           ;main.c: 73:                         PORTB = oldPort << k;
   565  07A8  1283               	bcf	3,5	;RP0=0, select bank0
   566  07A9  1303               	bcf	3,6	;RP1=0, select bank0
   567  07AA  0821               	movf	main@oldPort,w
   568  07AB  00FA               	movwf	??_main
   569  07AC  0A25               	incf	main@k,w
   570  07AD  2FB0               	goto	u394
   571  07AE                     u395:
   572  07AE  1003               	clrc
   573  07AF  0DFA               	rlf	??_main,f
   574  07B0                     u394:
   575  07B0  3EFF               	addlw	-1
   576  07B1  1D03               	skipz
   577  07B2  2FAE               	goto	u395
   578  07B3  087A               	movf	??_main,w
   579  07B4  0086               	movwf	6	;volatile
   580  07B5                     l922:
   581                           
   582                           ;main.c: 74:                         _delay((unsigned long)((100)*(8000000/4000.0)));
   583  07B5  3002               	movlw	2
   584  07B6  00FC               	movwf	??_main+2
   585  07B7  3004               	movlw	4
   586  07B8  00FB               	movwf	??_main+1
   587  07B9  30BA               	movlw	186
   588  07BA  00FA               	movwf	??_main
   589  07BB                     u437:
   590  07BB  0BFA               	decfsz	??_main,f
   591  07BC  2FBB               	goto	u437
   592  07BD  0BFB               	decfsz	??_main+1,f
   593  07BE  2FBB               	goto	u437
   594  07BF  0BFC               	decfsz	??_main+2,f
   595  07C0  2FBB               	goto	u437
   596  07C1  0000               	nop
   597  07C2                     l924:
   598                           
   599                           ;main.c: 75:                     }
   600  07C2  3001               	movlw	1
   601  07C3  1283               	bcf	3,5	;RP0=0, select bank0
   602  07C4  1303               	bcf	3,6	;RP1=0, select bank0
   603  07C5  07A5               	addwf	main@k,f
   604  07C6  1803               	skipnc
   605  07C7  0AA6               	incf	main@k+1,f
   606  07C8  3000               	movlw	0
   607  07C9  07A6               	addwf	main@k+1,f
   608  07CA                     l926:
   609  07CA  0829               	movf	main@x+1,w
   610  07CB  3A80               	xorlw	128
   611  07CC  00FA               	movwf	??_main
   612  07CD  0826               	movf	main@k+1,w
   613  07CE  3A80               	xorlw	128
   614  07CF  027A               	subwf	??_main,w
   615  07D0  1D03               	skipz
   616  07D1  2FD4               	goto	u405
   617  07D2  0825               	movf	main@k,w
   618  07D3  0228               	subwf	main@x,w
   619  07D4                     u405:
   620  07D4  1803               	skipnc
   621  07D5  2FD7               	goto	u401
   622  07D6  2FD8               	goto	u400
   623  07D7                     u401:
   624  07D7  2FA8               	goto	l920
   625  07D8                     u400:
   626  07D8                     l928:
   627                           
   628                           ;main.c: 76:                     oldPort = PORTB;
   629  07D8  1283               	bcf	3,5	;RP0=0, select bank0
   630  07D9  1303               	bcf	3,6	;RP1=0, select bank0
   631  07DA  0806               	movf	6,w	;volatile
   632  07DB  00FA               	movwf	??_main
   633  07DC  087A               	movf	??_main,w
   634  07DD  00A1               	movwf	main@oldPort
   635  07DE                     l930:
   636                           
   637                           ;main.c: 77:                     printf("%s", PORTB);
   638  07DE  0806               	movf	6,w	;volatile
   639  07DF  00FA               	movwf	??_main
   640  07E0  01FB               	clrf	??_main+1
   641  07E1  087A               	movf	??_main,w
   642  07E2  00F0               	movwf	?_printf
   643  07E3  087B               	movf	??_main+1,w
   644  07E4  00F1               	movwf	?_printf+1
   645  07E5  3008               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   646  07E6  26A7               	fcall	_printf
   647  07E7                     l932:
   648                           
   649                           ;main.c: 78:                 }
   650  07E7  30FF               	movlw	255
   651  07E8  1283               	bcf	3,5	;RP0=0, select bank0
   652  07E9  1303               	bcf	3,6	;RP1=0, select bank0
   653  07EA  07A8               	addwf	main@x,f
   654  07EB  1803               	skipnc
   655  07EC  0AA9               	incf	main@x+1,f
   656  07ED  30FF               	movlw	255
   657  07EE  07A9               	addwf	main@x+1,f
   658  07EF  2FA0               	goto	l914
   659  07F0                     l938:
   660                           
   661                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   662                           ; Switch size 1, requested type "simple"
   663                           ; Number of cases is 1, Range of values is 0 to 0
   664                           ; switch strategies available:
   665                           ; Name         Instructions Cycles
   666                           ; simple_byte            4     3 (average)
   667                           ; direct_byte            7     6 (fixed)
   668                           ; jumptable            260     6 (fixed)
   669                           ;	Chosen strategy is simple_byte
   670  07F0  0823               	movf	main@i+1,w
   671  07F1  3A00               	xorlw	0	; case 0
   672  07F2  1903               	skipnz
   673  07F3  2FF5               	goto	l996
   674  07F4  2F16               	goto	l872
   675  07F5                     l996:
   676                           
   677                           ; Switch size 1, requested type "simple"
   678                           ; Number of cases is 2, Range of values is 0 to 1
   679                           ; switch strategies available:
   680                           ; Name         Instructions Cycles
   681                           ; simple_byte            7     4 (average)
   682                           ; direct_byte            8     6 (fixed)
   683                           ; jumptable            260     6 (fixed)
   684                           ;	Chosen strategy is simple_byte
   685  07F5  0822               	movf	main@i,w
   686  07F6  3A00               	xorlw	0	; case 0
   687  07F7  1903               	skipnz
   688  07F8  2F67               	goto	l898
   689  07F9  3A01               	xorlw	1	; case 1
   690  07FA  1903               	skipnz
   691  07FB  2F9A               	goto	l26
   692  07FC  2F16               	goto	l872
   693  07FD  2800               	ljmp	start
   694  07FE                     __end_of_main:
   695                           
   696                           	psect	text1
   697  06A7                     __ptext1:	
   698 ;; *************** function _printf *****************
   699 ;; Defined at:
   700 ;;		line 477 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;  f               1    wreg     PTR const unsigned char 
   703 ;;		 -> STR_1(3), 
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  f               1    6[COMMON] PTR const unsigned char 
   706 ;;		 -> STR_1(3), 
   707 ;;  tmpval          4    0        struct .
   708 ;;  cp              2    8[COMMON] PTR const unsigned char 
   709 ;;		 -> STR_2(7), ?_printf(2), main@x(2), 
   710 ;;  len             2    0        unsigned int 
   711 ;;  val             2    0        unsigned int 
   712 ;;  c               1    7[COMMON] unsigned char 
   713 ;;  ap              1    5[COMMON] PTR void [1]
   714 ;;		 -> ?_printf(2), 
   715 ;;  flag            1    0        unsigned char 
   716 ;;  prec            1    0        char 
   717 ;; Return value:  Size  Location     Type
   718 ;;                  2    0[COMMON] int 
   719 ;; Registers used:
   720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   726 ;;      Params:         2       0       0       0
   727 ;;      Locals:         6       0       0       0
   728 ;;      Temps:          2       0       0       0
   729 ;;      Totals:        10       0       0       0
   730 ;;Total ram usage:       10 bytes
   731 ;; Hardware stack levels used:    1
   732 ;; Hardware stack levels required when called:    1
   733 ;; This function calls:
   734 ;;		_putch
   735 ;; This function is called by:
   736 ;;		_main
   737 ;; This function uses a non-reentrant model
   738 ;;
   739                           
   740                           
   741                           ;psect for function _printf
   742  06A7                     _printf:
   743                           
   744                           ;incstack = 0
   745                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   746                           ;printf@f stored from wreg
   747  06A7  00F6               	movwf	printf@f
   748  06A8                     l824:
   749                           
   750                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 477: printf(const
      +                           char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 47
      +                          8: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 479:  va_list
      +                           ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 512:  char c;
      +                          ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521:  signed char
      +                           prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 525:  unsig
      +                          ned char flag;
   751  06A8  3070               	movlw	(low (?_printf| 0))& (0+255)
   752  06A9  00F2               	movwf	??_printf
   753  06AA  0872               	movf	??_printf,w
   754  06AB  00F5               	movwf	printf@ap
   755                           
   756                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   757  06AC  2EFB               	goto	l850
   758  06AD                     l826:
   759                           
   760                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   761  06AD  3025               	movlw	37
   762  06AE  0677               	xorwf	printf@c,w
   763  06AF  1903               	btfsc	3,2
   764  06B0  2EB2               	goto	u211
   765  06B1  2EB3               	goto	u210
   766  06B2                     u211:
   767  06B2  2EB6               	goto	l830
   768  06B3                     u210:
   769  06B3                     l828:
   770                           
   771                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    (putch(c) );
   772  06B3  0877               	movf	printf@c,w
   773  06B4  26A6               	fcall	_putch
   774                           
   775                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
   776  06B5  2EFB               	goto	l850
   777  06B6                     l830:
   778                           
   779                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   780  06B6  2EE5               	goto	l848
   781  06B7                     l832:
   782                           
   783                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 760:     cp = (*(
      +                          const char * *)__va_arg((*(const char * **)ap), (const char *)0));
   784  06B7  0875               	movf	printf@ap,w
   785  06B8  0084               	movwf	4
   786  06B9  0800               	movf	0,w
   787  06BA  00F8               	movwf	printf@cp
   788  06BB  3000               	movlw	0
   789  06BC  00F9               	movwf	printf@cp+1
   790  06BD                     l834:
   791  06BD  3001               	movlw	1
   792  06BE  00F2               	movwf	??_printf
   793  06BF  0872               	movf	??_printf,w
   794  06C0  07F5               	addwf	printf@ap,f
   795  06C1                     l836:
   796                           
   797                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 766:    if(!cp)
   798  06C1  0878               	movf	printf@cp,w
   799  06C2  0479               	iorwf	printf@cp+1,w
   800  06C3  1D03               	btfss	3,2
   801  06C4  2EC6               	goto	u221
   802  06C5  2EC7               	goto	u220
   803  06C6                     u221:
   804  06C6  2ED8               	goto	l844
   805  06C7                     u220:
   806  06C7                     l838:
   807                           
   808                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 767:     cp = "(n
      +                          ull)";
   809  06C7  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   810  06C8  00F8               	movwf	printf@cp
   811  06C9  3080               	movlw	128
   812  06CA  00F9               	movwf	printf@cp+1
   813  06CB  2ED8               	goto	l844
   814  06CC                     l840:
   815                           
   816                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 804:     (putch(*
      +                          cp++) );
   817  06CC  0879               	movf	printf@cp+1,w
   818  06CD  00FF               	movwf	btemp+1
   819  06CE  0878               	movf	printf@cp,w
   820  06CF  0084               	movwf	4
   821  06D0  2001               	fcall	stringtab
   822  06D1  26A6               	fcall	_putch
   823  06D2                     l842:
   824  06D2  3001               	movlw	1
   825  06D3  07F8               	addwf	printf@cp,f
   826  06D4  1803               	skipnc
   827  06D5  0AF9               	incf	printf@cp+1,f
   828  06D6  3000               	movlw	0
   829  06D7  07F9               	addwf	printf@cp+1,f
   830  06D8                     l844:
   831                           
   832                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 803:    while(*cp
      +                          )
   833  06D8  0879               	movf	printf@cp+1,w
   834  06D9  1283               	bcf	3,5	;RP0=0, select bank0
   835  06DA  1303               	bcf	3,6	;RP1=0, select bank0
   836  06DB  00FF               	movwf	btemp+1
   837  06DC  0878               	movf	printf@cp,w
   838  06DD  0084               	movwf	4
   839  06DE  2001               	fcall	stringtab
   840  06DF  3A00               	xorlw	0
   841  06E0  1D03               	skipz
   842  06E1  2EE3               	goto	u231
   843  06E2  2EE4               	goto	u230
   844  06E3                     u231:
   845  06E3  2ECC               	goto	l840
   846  06E4                     u230:
   847  06E4  2EFB               	goto	l850
   848  06E5                     l848:
   849  06E5  3001               	movlw	1
   850  06E6  07F6               	addwf	printf@f,f
   851  06E7  30FF               	movlw	-1
   852  06E8  0776               	addwf	printf@f,w
   853  06E9  0084               	movwf	4
   854  06EA  200B               	fcall	stringdir
   855  06EB  00F7               	movwf	printf@c
   856  06EC  00F2               	movwf	??_printf
   857  06ED  01F3               	clrf	??_printf+1
   858                           
   859                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   860                           ; Switch size 1, requested type "simple"
   861                           ; Number of cases is 1, Range of values is 0 to 0
   862                           ; switch strategies available:
   863                           ; Name         Instructions Cycles
   864                           ; simple_byte            4     3 (average)
   865                           ; direct_byte            7     6 (fixed)
   866                           ; jumptable            260     6 (fixed)
   867                           ;	Chosen strategy is simple_byte
   868  06EE  0873               	movf	??_printf+1,w
   869  06EF  3A00               	xorlw	0	; case 0
   870  06F0  1903               	skipnz
   871  06F1  2EF3               	goto	l998
   872  06F2  2EFB               	goto	l850
   873  06F3                     l998:
   874                           
   875                           ; Switch size 1, requested type "simple"
   876                           ; Number of cases is 2, Range of values is 0 to 115
   877                           ; switch strategies available:
   878                           ; Name         Instructions Cycles
   879                           ; simple_byte            7     4 (average)
   880                           ; direct_byte          122     6 (fixed)
   881                           ; jumptable            260     6 (fixed)
   882                           ;	Chosen strategy is simple_byte
   883  06F3  0872               	movf	??_printf,w
   884  06F4  3A00               	xorlw	0	; case 0
   885  06F5  1903               	skipnz
   886  06F6  2F09               	goto	l139
   887  06F7  3A73               	xorlw	115	; case 115
   888  06F8  1903               	skipnz
   889  06F9  2EB7               	goto	l832
   890  06FA  2EFB               	goto	l850
   891  06FB                     l850:
   892                           
   893                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   894  06FB  3001               	movlw	1
   895  06FC  07F6               	addwf	printf@f,f
   896  06FD  30FF               	movlw	-1
   897  06FE  0776               	addwf	printf@f,w
   898  06FF  0084               	movwf	4
   899  0700  200B               	fcall	stringdir
   900  0701  00F2               	movwf	??_printf
   901  0702  0872               	movf	??_printf,w
   902  0703  00F7               	movwf	printf@c
   903  0704  0877               	movf	printf@c,w
   904  0705  1D03               	btfss	3,2
   905  0706  2F08               	goto	u241
   906  0707  2F09               	goto	u240
   907  0708                     u241:
   908  0708  2EAD               	goto	l826
   909  0709                     u240:
   910  0709                     l139:
   911  0709  0008               	return
   912  070A                     __end_of_printf:
   913                           
   914                           	psect	text2
   915  06A6                     __ptext2:	
   916 ;; *************** function _putch *****************
   917 ;; Defined at:
   918 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\putch.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  c               1    wreg     unsigned char 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  c               1    0[COMMON] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   932 ;;      Params:         0       0       0       0
   933 ;;      Locals:         0       0       0       0
   934 ;;      Temps:          0       0       0       0
   935 ;;      Totals:         0       0       0       0
   936 ;;Total ram usage:        0 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; This function calls:
   939 ;;		Nothing
   940 ;; This function is called by:
   941 ;;		_printf
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           
   946                           ;psect for function _putch
   947  06A6                     _putch:
   948  06A6                     l594:	
   949                           ;incstack = 0
   950                           ; Regs used in _putch: [wreg]
   951                           
   952  06A6  0008               	return
   953  06A7                     __end_of_putch:
   954  007E                     btemp	set	126	;btemp
   955  007E                     wtemp0	set	126
   956                           
   957                           	psect	config
   958                           
   959                           ;Config register CONFIG @ 0x2007
   960                           ;	Oscillator Selection bits
   961                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   962                           ;	Watchdog Timer Enable bit
   963                           ;	WDTE = OFF, WDT disabled
   964                           ;	Power-up Timer Enable bit
   965                           ;	PWRTE = ON, PWRT enabled
   966                           ;	RA5/MCLR pin function select
   967                           ;	MCLRE = ON, RA5/MCLR pin function is MCLR
   968                           ;	Brown-out Reset Enable bit
   969                           ;	BOREN = ON, BOD Reset enabled
   970                           ;	Low-Voltage Programming Enable bit
   971                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
   972                           ;	Data Code Protection bit
   973                           ;	CPD = OFF, Data memory code protection off
   974                           ;	Code Protection bits
   975                           ;	CP = OFF, Program memory code protection off
   976  2007                     	org	8199
   977  2007  3F62               	dw	16226

Data Sizes:
    Strings     10
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     10      10
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[7]), ?_printf(COMMON[2]), main@x(BANK0[2]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 


Critical Paths under _main in COMMON

    _main->_printf

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0     614
                                             10 COMMON     3     3      0
                                              0 BANK0     10    10      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              19    17      2     217
                                              0 COMMON    10     8      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      A       A       3       12.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Nov 18 10:15:12 2020

                      pc 0002                       l26 079A                       fsr 0004  
                    l139 0709                      l900 0769                      l830 06B6  
                    l840 06CC                      l832 06B7                      l824 06A8  
                    l920 07A8                      l912 079C                      l904 0777  
                    l594 06A6                      l842 06D2                      l834 06BD  
                    l826 06AD                      l850 06FB                      l930 07DE  
                    l922 07B5                      l914 07A0                      l906 0784  
                    l844 06D8                      l836 06C1                      l828 06B3  
                    l932 07E7                      l924 07C2                      l908 0791  
                    l860 070F                      l838 06C7                      l926 07CA  
                    l918 07A5                      l870 0716                      l862 0712  
                    l848 06E5                      l928 07D8                      l880 073F  
                    l872 0716                      l864 0712                      l856 070A  
                    l938 07F0                      l890 0759                      l882 0744  
                    l874 0721                      l866 0713                      l858 070E  
                    l884 0749                      l876 0726                      l892 0759  
                    l868 0714                      l894 075D                      l886 0753  
                    l878 072B                      l896 0764                      l888 0759  
                    l898 0767                      l996 07F5                      l998 06F3  
                    u210 06B3                      u211 06B2                      u220 06C7  
                    u300 073C                      u221 06C6                      u230 06E4  
                    u310 0744                      u231 06E3                      u311 0743  
                    u240 0709                      u400 07D8                      u320 0749  
                    u241 0708                      u401 07D7                      u321 0748  
                    u330 074F                      u250 071D                      u331 074D  
                    u251 071B                      u340 0750                      u260 071E  
                    u405 07D4                      u350 0764                      u270 0726  
                    u351 0763                      u271 0725                      u360 0776  
                    u280 072B                      u361 0775                      u417 072F  
                    u281 072A                      u290 073B                      u427 078A  
                    u291 0739                      u380 07A4                      u437 07BB  
                    u381 07A3                      u365 0772                      u374 077F  
                    u375 077D                      u394 07B0                      u395 07AE  
                    fsr0 0004                      indf 0000                     STR_1 0018  
                   STR_2 0011              main@oldPort 0021                     _main 070A  
                   btemp 007E                     start 0000                    ?_main 0070  
                  _PORTA 0005                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0086                    _putch 06A6                    main@i 0022  
                  main@k 0025                    main@x 0028                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FE  
           __end_of_main 07FE                   ??_main 007A                   ?_putch 0070  
          main@oldButton 0024                   _printf 06A7                   putch@c 0070  
__end_of__initialization 07FE           __pcstackCOMMON 0070            __end_of_putch 06A7  
                ??_putch 0070               __pmaintext 070A                  ?_printf 0070  
             __stringtab 0001                  __ptext1 06A7                  __ptext2 06A6  
        __size_of_printf 0063     end_of_initialization 07FE                  printf@c 0077  
                printf@f 0076               main@button 0027           __end_of_printf 070A  
    start_initialization 07FE                 ??_printf 0072                ___latbits 0000  
          __pcstackBANK0 0020                __pstrings 0001           __size_of_putch 0001  
            __stringbase 0010                main@state 0020       __end_of__stringtab 0011  
          __size_of_main 00F4                stringcode 000B                 printf@ap 0075  
               printf@cp 0078                 stringdir 000B                 stringtab 0001  
