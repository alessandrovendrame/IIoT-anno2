

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Nov 18 11:10:47 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F628
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
     7                           	psect	inittext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.20
    15                           ; Generated 12/02/2020 GMT
    16                           ; 
    17                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F628 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0015                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001F                     	;# 
    72  0081                     	;# 
    73  0085                     	;# 
    74  0086                     	;# 
    75  008C                     	;# 
    76  008E                     	;# 
    77  0092                     	;# 
    78  0098                     	;# 
    79  0099                     	;# 
    80  009A                     	;# 
    81  009B                     	;# 
    82  009C                     	;# 
    83  009D                     	;# 
    84  009F                     	;# 
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  008C                     	;# 
   113  008E                     	;# 
   114  0092                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009F                     	;# 
   122                           
   123                           	psect	idataBANK1
   124  06EF                     __pidataBANK1:
   125                           
   126                           ;initializer for main@F533
   127  06EF  3401               	retlw	1
   128  06F0  3402               	retlw	2
   129  06F1  3404               	retlw	4
   130  06F2  3408               	retlw	8
   131  06F3  3410               	retlw	16
   132  06F4  3420               	retlw	32
   133  06F5  3440               	retlw	64
   134  06F6  3480               	retlw	128
   135  06F7  3481               	retlw	129
   136  06F8  3482               	retlw	130
   137  06F9  3484               	retlw	132
   138  06FA  3488               	retlw	136
   139  06FB  3490               	retlw	144
   140  06FC  34A0               	retlw	160
   141  06FD  34C0               	retlw	192
   142  06FE  34C1               	retlw	193
   143  06FF  34C2               	retlw	194
   144  0700  34C4               	retlw	196
   145  0701  34C8               	retlw	200
   146  0702  34D0               	retlw	208
   147  0703  34E0               	retlw	224
   148  0704  34E1               	retlw	225
   149  0705  34E2               	retlw	226
   150  0706  34E4               	retlw	228
   151  0707  34E8               	retlw	232
   152  0708  34F0               	retlw	240
   153  0709  34F1               	retlw	241
   154  070A  34F2               	retlw	242
   155  070B  34F4               	retlw	244
   156  070C  34F8               	retlw	248
   157  070D  34F9               	retlw	249
   158  070E  34FA               	retlw	250
   159  070F  34FC               	retlw	252
   160  0710  34FD               	retlw	253
   161  0711  34FE               	retlw	254
   162  0712  34FF               	retlw	255
   163  0005                     _PORTA	set	5
   164  0006                     _PORTB	set	6
   165  0086                     _TRISB	set	134
   166  0085                     _TRISA	set	133
   167                           
   168                           	psect	cinit
   169  07F4                     start_initialization:	
   170                           ; #config settings
   171                           
   172  07F4                     __initialization:
   173                           
   174                           ; Initialize objects allocated to BANK1
   175  07F4  1383               	bcf	3,7	;select IRP bank0
   176  07F5  30C4               	movlw	low (__pdataBANK1+36)
   177  07F6  00FD               	movwf	btemp+-1
   178  07F7  3006               	movlw	high __pidataBANK1
   179  07F8  00FE               	movwf	btemp
   180  07F9  30EF               	movlw	low __pidataBANK1
   181  07FA  00FF               	movwf	btemp+1
   182  07FB  30A0               	movlw	low __pdataBANK1
   183  07FC  0084               	movwf	4
   184  07FD  26E4               	fcall	init_ram0
   185  07FE                     end_of_initialization:	
   186                           ;End of C runtime variable initialization code
   187                           
   188  07FE                     __end_of__initialization:
   189  07FE  0183               	clrf	3
   190  07FF  2F13               	ljmp	_main	;jump to C main() function
   191                           
   192                           	psect	dataBANK1
   193  00A0                     __pdataBANK1:
   194  00A0                     main@F533:
   195  00A0                     	ds	36
   196                           
   197                           	psect	inittext
   198  06E0                     init_fetch0:	
   199                           ;	Called with low address in FSR and high address in W
   200                           
   201  06E0  087E               	movf	btemp,w
   202  06E1  008A               	movwf	10
   203  06E2  087F               	movf	btemp+1,w
   204  06E3  0082               	movwf	2
   205  06E4                     init_ram0:	
   206                           ;Called with:
   207                           ;	high address of idata address in btemp 
   208                           ;	low address of idata address in btemp+1 
   209                           ;	low address of data in FSR
   210                           ;	high address + 1 of data in btemp-1
   211                           
   212  06E4  26E0               	fcall	init_fetch0
   213  06E5  0080               	movwf	0
   214  06E6  0A84               	incf	4,f
   215  06E7  0804               	movf	4,w
   216  06E8  067D               	xorwf	btemp+-1,w
   217  06E9  1903               	btfsc	3,2
   218  06EA  3400               	retlw	0
   219  06EB  0AFF               	incf	btemp+1,f
   220  06EC  1903               	btfsc	3,2
   221  06ED  0AFE               	incf	btemp,f
   222  06EE  2EE4               	goto	init_ram0
   223                           
   224                           	psect	cstackCOMMON
   225  0070                     __pcstackCOMMON:
   226  0070                     ?_main:
   227  0070                     ??_main:	
   228                           ; 1 bytes @ 0x0
   229                           
   230                           
   231                           ; 1 bytes @ 0x0
   232  0070                     	ds	4
   233                           
   234                           	psect	cstackBANK0
   235  0020                     __pcstackBANK0:
   236  0020                     main@sequence:
   237                           
   238                           ; 36 bytes @ 0x0
   239  0020                     	ds	39
   240  0047                     main@state:
   241                           
   242                           ; 1 bytes @ 0x27
   243  0047                     	ds	1
   244  0048                     main@i:
   245                           
   246                           ; 2 bytes @ 0x28
   247  0048                     	ds	2
   248  004A                     main@oldButton:
   249                           
   250                           ; 1 bytes @ 0x2A
   251  004A                     	ds	1
   252  004B                     main@button:
   253                           
   254                           ; 1 bytes @ 0x2B
   255  004B                     	ds	1
   256  004C                     main@x:
   257                           
   258                           ; 2 bytes @ 0x2C
   259  004C                     	ds	2
   260                           
   261                           	psect	maintext
   262  0713                     __pmaintext:	
   263 ;;
   264 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   265 ;;
   266 ;; *************** function _main *****************
   267 ;; Defined at:
   268 ;;		line 29 in file "main.c"
   269 ;; Parameters:    Size  Location     Type
   270 ;;		None
   271 ;; Auto vars:     Size  Location     Type
   272 ;;  sequence       36    0[BANK0 ] unsigned char [36]
   273 ;;  x               2   44[BANK0 ] int 
   274 ;;  i               2   40[BANK0 ] int 
   275 ;;  k               2    0        int 
   276 ;;  button          1   43[BANK0 ] unsigned char 
   277 ;;  oldButton       1   42[BANK0 ] unsigned char 
   278 ;;  state           1   39[BANK0 ] unsigned char 
   279 ;;  oldPort         1    0        unsigned char 
   280 ;;  aux             1    0        unsigned char 
   281 ;; Return value:  Size  Location     Type
   282 ;;                  1    wreg      void 
   283 ;; Registers used:
   284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   285 ;; Tracked objects:
   286 ;;		On entry : B00/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   290 ;;      Params:         0       0       0       0
   291 ;;      Locals:         0      46       0       0
   292 ;;      Temps:          4       0       0       0
   293 ;;      Totals:         4      46       0       0
   294 ;;Total ram usage:       50 bytes
   295 ;; This function calls:
   296 ;;		Nothing
   297 ;; This function is called by:
   298 ;;		Startup code after reset
   299 ;; This function uses a non-reentrant model
   300 ;;
   301                           
   302                           
   303                           ;psect for function _main
   304  0713                     _main:
   305  0713                     l735:	
   306                           ;incstack = 0
   307                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1]
   308                           
   309                           
   310                           ;main.c: 31:     TRISA = 0b00000100;
   311  0713  3004               	movlw	4
   312  0714  1683               	bsf	3,5	;RP0=1, select bank1
   313  0715  1303               	bcf	3,6	;RP1=0, select bank1
   314  0716  0085               	movwf	5	;volatile
   315  0717                     l737:
   316                           
   317                           ;main.c: 32:     TRISB = 0x00;
   318  0717  0186               	clrf	6	;volatile
   319  0718                     l739:
   320                           
   321                           ;main.c: 33:     PORTB = 0x00;
   322  0718  1283               	bcf	3,5	;RP0=0, select bank0
   323  0719  1303               	bcf	3,6	;RP1=0, select bank0
   324  071A  0186               	clrf	6	;volatile
   325  071B                     l741:
   326  071B                     l743:
   327                           
   328                           ;main.c: 37:     char oldButton = 0;
   329  071B  01CA               	clrf	main@oldButton
   330  071C                     l745:
   331                           
   332                           ;main.c: 38:     char state = 0;
   333  071C  01C7               	clrf	main@state
   334  071D                     l747:
   335                           
   336                           ;main.c: 39:     int i = 0;
   337  071D  01C8               	clrf	main@i
   338  071E  01C9               	clrf	main@i+1
   339  071F                     l749:
   340                           
   341                           ;main.c: 40:     char sequence [36] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
   342  071F  3020               	movlw	main@sequence& (0+255)
   343  0720  0084               	movwf	4
   344  0721  30A0               	movlw	low main@F533
   345  0722  00F0               	movwf	??_main
   346  0723  0804               	movf	4,w
   347  0724  00F1               	movwf	??_main+1
   348  0725  3024               	movlw	36
   349  0726  00F2               	movwf	??_main+2
   350  0727                     u160:
   351  0727  0870               	movf	??_main,w
   352  0728  0084               	movwf	4
   353  0729  1383               	bcf	3,7	;select IRP bank1
   354  072A  0800               	movf	0,w
   355  072B  00F3               	movwf	??_main+3
   356  072C  0AF0               	incf	??_main,f
   357  072D  0871               	movf	??_main+1,w
   358  072E  0084               	movwf	4
   359  072F  0873               	movf	??_main+3,w
   360  0730  0080               	movwf	0
   361  0731  0AF1               	incf	??_main+1,f
   362  0732  0BF2               	decfsz	??_main+2,f
   363  0733  2F27               	goto	u160
   364  0734                     l751:
   365  0734                     l753:
   366                           
   367                           ;main.c: 52:         button = !(PORTA & 0x04);
   368  0734  1283               	bcf	3,5	;RP0=0, select bank0
   369  0735  1303               	bcf	3,6	;RP1=0, select bank0
   370  0736  1D05               	btfss	5,2	;volatile
   371  0737  2F39               	goto	u171
   372  0738  2F3B               	goto	u170
   373  0739                     u171:
   374  0739  3001               	movlw	1
   375  073A  2F3C               	goto	u180
   376  073B                     u170:
   377  073B  3000               	movlw	0
   378  073C                     u180:
   379  073C  00F0               	movwf	??_main
   380  073D  0870               	movf	??_main,w
   381  073E  00CB               	movwf	main@button
   382  073F                     l755:
   383                           
   384                           ;main.c: 53:         if((button == 1) && (oldButton == 0)) {
   385  073F  034B               	decf	main@button,w
   386  0740  1D03               	btfss	3,2
   387  0741  2F43               	goto	u191
   388  0742  2F44               	goto	u190
   389  0743                     u191:
   390  0743  2F77               	goto	l773
   391  0744                     u190:
   392  0744                     l757:
   393  0744  084A               	movf	main@oldButton,w
   394  0745  1D03               	btfss	3,2
   395  0746  2F48               	goto	u201
   396  0747  2F49               	goto	u200
   397  0748                     u201:
   398  0748  2F77               	goto	l773
   399  0749                     u200:
   400  0749                     l759:
   401                           
   402                           ;main.c: 56:             _delay((unsigned long)((20)*(8000000/4000.0)));
   403  0749  3034               	movlw	52
   404  074A  00F1               	movwf	??_main+1
   405  074B  30F1               	movlw	241
   406  074C  00F0               	movwf	??_main
   407  074D                     u317:
   408  074D  0BF0               	decfsz	??_main,f
   409  074E  2F4D               	goto	u317
   410  074F  0BF1               	decfsz	??_main+1,f
   411  0750  2F4D               	goto	u317
   412  0751  2F52               	nop2
   413                           
   414                           ;main.c: 57:             button = !(PORTA & 0x04);
   415  0752  1283               	bcf	3,5	;RP0=0, select bank0
   416  0753  1303               	bcf	3,6	;RP1=0, select bank0
   417  0754  1D05               	btfss	5,2	;volatile
   418  0755  2F57               	goto	u211
   419  0756  2F59               	goto	u210
   420  0757                     u211:
   421  0757  3001               	movlw	1
   422  0758  2F5A               	goto	u220
   423  0759                     u210:
   424  0759  3000               	movlw	0
   425  075A                     u220:
   426  075A  00F0               	movwf	??_main
   427  075B  0870               	movf	??_main,w
   428  075C  00CB               	movwf	main@button
   429  075D                     l761:
   430                           
   431                           ;main.c: 58:             if((button == 1) && (oldButton == 0)){
   432  075D  034B               	decf	main@button,w
   433  075E  1D03               	btfss	3,2
   434  075F  2F61               	goto	u231
   435  0760  2F62               	goto	u230
   436  0761                     u231:
   437  0761  2F77               	goto	l773
   438  0762                     u230:
   439  0762                     l763:
   440  0762  084A               	movf	main@oldButton,w
   441  0763  1D03               	btfss	3,2
   442  0764  2F66               	goto	u241
   443  0765  2F67               	goto	u240
   444  0766                     u241:
   445  0766  2F77               	goto	l773
   446  0767                     u240:
   447  0767                     l765:
   448                           
   449                           ;main.c: 59:                 state = !state;
   450  0767  0847               	movf	main@state,w
   451  0768  1903               	btfsc	3,2
   452  0769  2F6B               	goto	u251
   453  076A  2F6D               	goto	u250
   454  076B                     u251:
   455  076B  3001               	movlw	1
   456  076C  2F6E               	goto	u260
   457  076D                     u250:
   458  076D  3000               	movlw	0
   459  076E                     u260:
   460  076E  00F0               	movwf	??_main
   461  076F  0870               	movf	??_main,w
   462  0770  00C7               	movwf	main@state
   463  0771                     l767:
   464                           
   465                           ;main.c: 60:                 i++;
   466  0771  3001               	movlw	1
   467  0772  07C8               	addwf	main@i,f
   468  0773  1803               	skipnc
   469  0774  0AC9               	incf	main@i+1,f
   470  0775  3000               	movlw	0
   471  0776  07C9               	addwf	main@i+1,f
   472  0777                     l769:
   473  0777                     l771:
   474  0777                     l773:
   475                           
   476                           ;main.c: 65:         oldButton = button;
   477  0777  084B               	movf	main@button,w
   478  0778  00F0               	movwf	??_main
   479  0779  0870               	movf	??_main,w
   480  077A  00CA               	movwf	main@oldButton
   481  077B                     l775:
   482                           
   483                           ;main.c: 67:         if(i == 2){
   484  077B  3002               	movlw	2
   485  077C  0648               	xorwf	main@i,w
   486  077D  0449               	iorwf	main@i+1,w
   487  077E  1D03               	btfss	3,2
   488  077F  2F81               	goto	u271
   489  0780  2F82               	goto	u270
   490  0781                     u271:
   491  0781  2FE6               	goto	l809
   492  0782                     u270:
   493  0782                     l777:
   494                           
   495                           ;main.c: 68:             i = 0;
   496  0782  01C8               	clrf	main@i
   497  0783  01C9               	clrf	main@i+1
   498  0784  2FE6               	goto	l809
   499  0785                     l779:
   500                           
   501                           ;main.c: 73:                for(x = 0; x < 8; x++){
   502  0785  01CC               	clrf	main@x
   503  0786  01CD               	clrf	main@x+1
   504  0787                     l781:
   505  0787  084D               	movf	main@x+1,w
   506  0788  3A80               	xorlw	128
   507  0789  00FF               	movwf	btemp+1
   508  078A  3080               	movlw	128
   509  078B  027F               	subwf	btemp+1,w
   510  078C  1D03               	skipz
   511  078D  2F90               	goto	u285
   512  078E  3008               	movlw	8
   513  078F  024C               	subwf	main@x,w
   514  0790                     u285:
   515  0790  1C03               	skipc
   516  0791  2F93               	goto	u281
   517  0792  2F94               	goto	u280
   518  0793                     u281:
   519  0793  2F95               	goto	l785
   520  0794                     u280:
   521  0794  2F34               	goto	l753
   522  0795                     l785:
   523                           
   524                           ;main.c: 74:                     PORTB = 0x03 << x;
   525  0795  3003               	movlw	3
   526  0796  00F0               	movwf	??_main
   527  0797  1283               	bcf	3,5	;RP0=0, select bank0
   528  0798  1303               	bcf	3,6	;RP1=0, select bank0
   529  0799  0A4C               	incf	main@x,w
   530  079A  2F9D               	goto	u294
   531  079B                     u295:
   532  079B  1003               	clrc
   533  079C  0DF0               	rlf	??_main,f
   534  079D                     u294:
   535  079D  3EFF               	addlw	-1
   536  079E  1D03               	skipz
   537  079F  2F9B               	goto	u295
   538  07A0  0870               	movf	??_main,w
   539  07A1  0086               	movwf	6	;volatile
   540  07A2                     l787:
   541                           
   542                           ;main.c: 75:                     _delay((unsigned long)((100)*(8000000/4000.0)));
   543  07A2  3002               	movlw	2
   544  07A3  00F2               	movwf	??_main+2
   545  07A4  3004               	movlw	4
   546  07A5  00F1               	movwf	??_main+1
   547  07A6  30BA               	movlw	186
   548  07A7  00F0               	movwf	??_main
   549  07A8                     u327:
   550  07A8  0BF0               	decfsz	??_main,f
   551  07A9  2FA8               	goto	u327
   552  07AA  0BF1               	decfsz	??_main+1,f
   553  07AB  2FA8               	goto	u327
   554  07AC  0BF2               	decfsz	??_main+2,f
   555  07AD  2FA8               	goto	u327
   556  07AE  0000               	nop
   557  07AF                     l789:
   558                           
   559                           ;main.c: 76:                }
   560  07AF  3001               	movlw	1
   561  07B0  1283               	bcf	3,5	;RP0=0, select bank0
   562  07B1  1303               	bcf	3,6	;RP1=0, select bank0
   563  07B2  07CC               	addwf	main@x,f
   564  07B3  1803               	skipnc
   565  07B4  0ACD               	incf	main@x+1,f
   566  07B5  3000               	movlw	0
   567  07B6  07CD               	addwf	main@x+1,f
   568  07B7  2F87               	goto	l781
   569  07B8                     l793:
   570                           
   571                           ;main.c: 79:                 for(x=0;x<36;x++){
   572  07B8  01CC               	clrf	main@x
   573  07B9  01CD               	clrf	main@x+1
   574  07BA                     l795:
   575  07BA  084D               	movf	main@x+1,w
   576  07BB  3A80               	xorlw	128
   577  07BC  00FF               	movwf	btemp+1
   578  07BD  3080               	movlw	128
   579  07BE  027F               	subwf	btemp+1,w
   580  07BF  1D03               	skipz
   581  07C0  2FC3               	goto	u305
   582  07C1  3024               	movlw	36
   583  07C2  024C               	subwf	main@x,w
   584  07C3                     u305:
   585  07C3  1C03               	skipc
   586  07C4  2FC6               	goto	u301
   587  07C5  2FC7               	goto	u300
   588  07C6                     u301:
   589  07C6  2FC8               	goto	l799
   590  07C7                     u300:
   591  07C7  2F34               	goto	l753
   592  07C8                     l799:
   593                           
   594                           ;main.c: 80:                     PORTB = sequence[x];
   595  07C8  1283               	bcf	3,5	;RP0=0, select bank0
   596  07C9  1303               	bcf	3,6	;RP1=0, select bank0
   597  07CA  084C               	movf	main@x,w
   598  07CB  3E20               	addlw	(low (main@sequence| 0))& (0+255)
   599  07CC  0084               	movwf	4
   600  07CD  1383               	bcf	3,7	;select IRP bank0
   601  07CE  0800               	movf	0,w
   602  07CF  0086               	movwf	6	;volatile
   603  07D0                     l801:
   604                           
   605                           ;main.c: 81:                     _delay((unsigned long)((100)*(8000000/4000.0)));
   606  07D0  3002               	movlw	2
   607  07D1  00F2               	movwf	??_main+2
   608  07D2  3004               	movlw	4
   609  07D3  00F1               	movwf	??_main+1
   610  07D4  30BA               	movlw	186
   611  07D5  00F0               	movwf	??_main
   612  07D6                     u337:
   613  07D6  0BF0               	decfsz	??_main,f
   614  07D7  2FD6               	goto	u337
   615  07D8  0BF1               	decfsz	??_main+1,f
   616  07D9  2FD6               	goto	u337
   617  07DA  0BF2               	decfsz	??_main+2,f
   618  07DB  2FD6               	goto	u337
   619  07DC  0000               	nop
   620  07DD                     l803:
   621                           
   622                           ;main.c: 82:                 }
   623  07DD  3001               	movlw	1
   624  07DE  1283               	bcf	3,5	;RP0=0, select bank0
   625  07DF  1303               	bcf	3,6	;RP1=0, select bank0
   626  07E0  07CC               	addwf	main@x,f
   627  07E1  1803               	skipnc
   628  07E2  0ACD               	incf	main@x+1,f
   629  07E3  3000               	movlw	0
   630  07E4  07CD               	addwf	main@x+1,f
   631  07E5  2FBA               	goto	l795
   632  07E6                     l809:
   633                           
   634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   635                           ; Switch size 1, requested type "simple"
   636                           ; Number of cases is 1, Range of values is 0 to 0
   637                           ; switch strategies available:
   638                           ; Name         Instructions Cycles
   639                           ; simple_byte            4     3 (average)
   640                           ; direct_byte            7     6 (fixed)
   641                           ; jumptable            260     6 (fixed)
   642                           ;	Chosen strategy is simple_byte
   643  07E6  0849               	movf	main@i+1,w
   644  07E7  3A00               	xorlw	0	; case 0
   645  07E8  1903               	skipnz
   646  07E9  2FEB               	goto	l847
   647  07EA  2F34               	goto	l753
   648  07EB                     l847:
   649                           
   650                           ; Switch size 1, requested type "simple"
   651                           ; Number of cases is 2, Range of values is 0 to 1
   652                           ; switch strategies available:
   653                           ; Name         Instructions Cycles
   654                           ; simple_byte            7     4 (average)
   655                           ; direct_byte            8     6 (fixed)
   656                           ; jumptable            260     6 (fixed)
   657                           ;	Chosen strategy is simple_byte
   658  07EB  0848               	movf	main@i,w
   659  07EC  3A00               	xorlw	0	; case 0
   660  07ED  1903               	skipnz
   661  07EE  2F85               	goto	l779
   662  07EF  3A01               	xorlw	1	; case 1
   663  07F0  1903               	skipnz
   664  07F1  2FB8               	goto	l793
   665  07F2  2F34               	goto	l753
   666  07F3  2800               	ljmp	start
   667  07F4                     __end_of_main:
   668  007E                     btemp	set	126	;btemp
   669  007E                     wtemp0	set	126
   670                           
   671                           	psect	config
   672                           
   673                           ;Config register CONFIG @ 0x2007
   674                           ;	Oscillator Selection bits
   675                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   676                           ;	Watchdog Timer Enable bit
   677                           ;	WDTE = OFF, WDT disabled
   678                           ;	Power-up Timer Enable bit
   679                           ;	PWRTE = ON, PWRT enabled
   680                           ;	RA5/MCLR pin function select
   681                           ;	MCLRE = ON, RA5/MCLR pin function is MCLR
   682                           ;	Brown-out Reset Enable bit
   683                           ;	BOREN = ON, BOD Reset enabled
   684                           ;	Low-Voltage Programming Enable bit
   685                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
   686                           ;	Data Code Protection bit
   687                           ;	CPD = OFF, Data memory code protection off
   688                           ;	Code Protection bits
   689                           ;	CP = OFF, Program memory code protection off
   690  2007                     	org	8199
   691  2007  3F62               	dw	16226

Data Sizes:
    Strings     0
    Constant    0
    Data        36
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       4
    BANK0            80     46      46
    BANK1            80      0      36
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                51    51      0     349
                                              0 COMMON     4     4      0
                                              0 BANK0     46    46      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      24       7       45.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2E      2E       3       57.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      4       4       1       28.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      56      10        0.0%
ABS                  0      0      56       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Nov 18 11:10:47 2020

                      pc 0002                       fsr 0004                      l801 07D0  
                    l803 07DD                      l741 071B                      l751 0734  
                    l743 071B                      l735 0713                      l809 07E6  
                    l761 075D                      l753 0734                      l745 071C  
                    l737 0717                      l771 0777                      l763 0762  
                    l755 073F                      l747 071D                      l739 0718  
                    l781 0787                      l765 0767                      l757 0744  
                    l773 0777                      l749 071F                      l847 07EB  
                    l775 077B                      l767 0771                      l759 0749  
                    l793 07B8                      l785 0795                      l777 0782  
                    l769 0777                      l795 07BA                      l787 07A2  
                    l779 0785                      l789 07AF                      l799 07C8  
                    u200 0749                      u201 0748                      u210 0759  
                    u211 0757                      u300 07C7                      u220 075A  
                    u301 07C6                      u230 0762                      u231 0761  
                    u240 0767                      u160 0727                      u305 07C3  
                    u241 0766                      u250 076D                      u170 073B  
                    u251 076B                      u171 0739                      u260 076E  
                    u180 073C                      u317 074D                      u270 0782  
                    u190 0744                      u327 07A8                      u271 0781  
                    u191 0743                      u280 0794                      u337 07D6  
                    u281 0793                      u285 0790                      u294 079D  
                    u295 079B                      fsr0 0004                      indf 0000  
                   _main 0713                     btemp 007E                     start 0000  
                  ?_main 0070                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    main@i 0048  
                  main@x 004C             main@sequence 0020                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07F4  
           __end_of_main 07F4                   ??_main 0070            main@oldButton 004A  
__end_of__initialization 07FE           __pcstackCOMMON 0070             __pidataBANK1 06EF  
             __pmaintext 0713     end_of_initialization 07FE               main@button 004B  
    start_initialization 07F4               init_fetch0 06E0              __pdataBANK1 00A0  
              ___latbits 0000            __pcstackBANK0 0020                main@state 0047  
          __size_of_main 00E1                 main@F533 00A0                 init_ram0 06E4  
